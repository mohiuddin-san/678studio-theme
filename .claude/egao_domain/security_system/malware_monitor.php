<?php
/**
 * Ultra-Advanced Malware Detection System v3.0
 * Based on 2025 WordPress malware research findings
 * Updated: 2025-09-14 with latest obfuscation techniques
 */

$domains = ['678photo.com', 'egao-salon.jp', 'sugamo-navi.com'];
$alert_email = 'yoshihara@san-creation.com';

// 2025年最新の難読化パターン（研究結果に基づく）
$malware_patterns = [
    // === Base64 encoded patterns ===
    'eval.*base64_decode',
    'PD9waHAgZXZhbA',                    // <?php eval encoded
    'JXVkNGE5ZGI',                       // Common Base64 prefix
    'ZXZhbCg',                           // eval( encoded
    'YmFzZTY0X2RlY29kZQ',                // base64_decode encoded
    
    // === Multi-layer obfuscation (2025 findings) ===
    'eval\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode',  // 91-layer obfuscation
    'base64_decode\s*\(\s*str_rot13\s*\(\s*gzdecode',               // New 2025 pattern
    'eval\s*\(\s*gzinflate\s*\(\s*base64_decode',                  // Common triple layer
    'gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode',             // Without eval wrapper
    
    // === Hex encoding (2025 advanced) ===
    '\\x[0-9a-f]{2}\\x[0-9a-f]{2}',                          // Standard hex encoding
    '\\x[0-9a-f]{2}\\x[0-9a-f]{2}\\x[0-9a-f]{2}',         // Triple hex sequence
    'chr\s*\(\s*0x[0-9a-f]+\s*\)',                               // chr() with hex
    'chr\s*\(\s*[0-9]{2,3}\s*\)',                                // chr() with decimal
    
    // === Variable function patterns ===
    '\$[a-zA-Z_][a-zA-Z0-9_]*\s*\(',                           // Variable functions
    '\$\{[^}]+\}',                                              // Variable variables
    '\$[a-zA-Z_]+\s*=\s*[\'"]\s*[A-Za-z0-9+/]{50,}',        // Long Base64 assignments
    
    // === ShadowCaptcha campaign signatures (Aug 2025) ===
    'ShadowCaptcha',
    'geographic.*filter',
    'credential.*harvest',
    'crypto.*miner',
    'info.*steal',
    
    // === Professional-grade obfuscation ===
    'realtime.*generate',
    'business.*logic.*comment',
    'professional.*grade',
    
    // === Re-infection mechanisms ===
    'active.*plugin.*inject',
    'WPCode.*snippet',
    'mu-plugins.*backdoor',
    
    // === Original patterns (maintained) ===
    'vpskdd', 'fnfkus', 'Al1wpadmin', 'addwppUser',
    'wp_vcd', 'wp_tmp', 'wp_feed_', 'class_api_',
    
    // === Advanced evasion ===
    'IP.*based.*evasion',
    'batch.*script.*auto',
    'ZIP.*archive.*malicious',
    'stealth.*trojan.*deploy',
    
    // === String obfuscation ===
    'str_rot13.*eval',
    'rawurldecode.*eval',
    'urldecode.*eval',
    'strrev.*eval',                                               // String reverse
    'substr.*eval',                                               // Substring manipulation
    
    // === File inclusion tricks ===
    'include.*base64_decode',
    'require.*base64_decode',
    'include_once.*obfuscat',
    'require_once.*obfuscat',
    
    // === Whitespace obfuscation ===
    'chr\s*\(\s*9\s*\)',                                         // Tab character
    'chr\s*\(\s*32\s*\)',                                        // Space character
    'chr\s*\(\s*10\s*\)',                                        // Newline character
    
    // === XOR combinations ===
    '\$[a-zA-Z_]+\s*\^\s*[\'"]\w+[\'"]\s*\)\s*\(',          // XOR obfuscation
    'xor.*key.*decode',
    
    // === Professional backdoors ===
    'curl.*attacker.*controlled',
    'fetch.*remote.*execute',
    'persistent.*reinfection',
];

$threats_found = [];
$scan_start_time = microtime(true);

echo "[" . date('Y-m-d H:i:s') . "] Ultra-Advanced Malware Monitor v3.0 - Research-Based Detection...\n";

foreach ($domains as $domain) {
    $public_html = "/home/xb592942/$domain/public_html";
    if (!is_dir($public_html)) continue;
    
    echo "Scanning domain: $domain\n";
    
    // === Advanced pattern-based detection ===
    foreach ($malware_patterns as $pattern) {
        $cmd = "timeout 30 find $public_html -name '*.php' -exec grep -l -E -i '$pattern' {} \; 2>/dev/null | head -20";
        $infected_files = shell_exec($cmd);
        
        if (!empty(trim($infected_files))) {
            $threats_found[] = [
                'domain' => $domain,
                'type' => 'advanced_pattern_match',
                'pattern' => $pattern,
                'files' => array_filter(explode("\n", trim($infected_files)))
            ];
        }
    }
    
    // === Multi-layer obfuscation detection ===
    $multilayer_cmd = "timeout 30 find $public_html -name '*.php' -exec grep -l -E 'eval.*gzinflate.*str_rot13.*base64_decode|base64_decode.*str_rot13.*gzdecode' {} \; 2>/dev/null";
    $multilayer_files = shell_exec($multilayer_cmd);
    
    if (!empty(trim($multilayer_files))) {
        $threats_found[] = [
            'domain' => $domain,
            'type' => 'multilayer_obfuscation',
            'pattern' => 'Multi-layer encoding (91+ layers possible)',
            'files' => array_filter(explode("\n", trim($multilayer_files)))
        ];
    }
    
    // === Large suspicious PHP files (potential packed malware) ===
    $cmd = "find $public_html -name '*.php' -size +15360c -exec ls -la {} \; 2>/dev/null";  // 15KB+
    $large_files = shell_exec($cmd);
    
    if (!empty(trim($large_files))) {
        foreach (explode("\n", trim($large_files)) as $line) {
            if (!empty(trim($line))) {
                $parts = preg_split('/\s+/', trim($line));
                $file_path = end($parts);
                $file_size = $parts[4];
                
                // Check for suspicious content in large files
                $content_check = shell_exec("timeout 10 head -20 '$file_path' | grep -E -i '(eval|base64_decode|gzinflate|chr\\s*\\(|\\\\x[0-9a-f]{2})' 2>/dev/null");
                if (!empty(trim($content_check))) {
                    $threats_found[] = [
                        'domain' => $domain,
                        'type' => 'large_suspicious_file',
                        'pattern' => "Large file ($file_size bytes) with advanced obfuscation",
                        'files' => [$file_path]
                    ];
                }
            }
        }
    }
    
    // === Professional-grade backdoor detection ===
    $backdoor_patterns = [
        'mu-plugins.*backdoor',
        'curl.*eval.*response',
        'fetch.*attacker.*URL',
        'professional.*grade.*obfuscat'
    ];
    
    foreach ($backdoor_patterns as $pattern) {
        $cmd = "timeout 20 find $public_html -name '*.php' -exec grep -l -E -i '$pattern' {} \; 2>/dev/null";
        $backdoor_files = shell_exec($cmd);
        
        if (!empty(trim($backdoor_files))) {
            $threats_found[] = [
                'domain' => $domain,
                'type' => 'professional_backdoor',
                'pattern' => "Professional backdoor: $pattern",
                'files' => array_filter(explode("\n", trim($backdoor_files)))
            ];
        }
    }
    
    // === Check for malicious wp directories ===
    $wp_themes_dir = "/home/xb592942/$domain/public_html/wp-content/themes/wp";
    if (is_dir($wp_themes_dir)) {
        $threats_found[] = [
            'domain' => $domain,
            'type' => 'malicious_directory',
            'pattern' => 'themes/wp directory (known attack vector)',
            'files' => ['Malicious wp directory detected']
        ];
    }
    
    // === Suspicious file names (2025 updated) ===
    $suspicious_names = [
        'wp-confiq.php', 'wp-conflg.php', 'about.php', 'content.php', 
        'radio.php', 'ocblkd.php', 'xflicw.php', 'revisions.php',
        'case.php', 'error_log.php', 'wp-mail.php', 'wp-cron.php'  // 2025 additions
    ];
    
    foreach ($suspicious_names as $name) {
        $cmd = "find $public_html -name '$name' -type f 2>/dev/null";
        $found_files = shell_exec($cmd);
        
        if (!empty(trim($found_files))) {
            $threats_found[] = [
                'domain' => $domain,
                'type' => 'suspicious_filename_2025',
                'pattern' => "2025 Suspicious filename: $name",
                'files' => array_filter(explode("\n", trim($found_files)))
            ];
        }
    }
}

$scan_duration = round(microtime(true) - $scan_start_time, 2);

// === Alert system ===
if (!empty($threats_found)) {
    $threat_count = count($threats_found);
    $message = "🚨 ULTRA-ADVANCED MALWARE DETECTION v3.0 🚨\n\n";
    $message .= "Detection Time: " . date('Y-m-d H:i:s') . "\n";
    $message .= "Scan Duration: {$scan_duration}s\n";
    $message .= "Threats Found: $threat_count\n\n";
    
    foreach ($threats_found as $threat) {
        $message .= "🔴 THREAT DETECTED\n";
        $message .= "Domain: " . $threat['domain'] . "\n";
        $message .= "Type: " . $threat['type'] . "\n";
        $message .= "Pattern: " . $threat['pattern'] . "\n";
        $message .= "Files (" . count($threat['files']) . "): " . implode(", ", array_slice($threat['files'], 0, 5)) . "\n";
        if (count($threat['files']) > 5) {
            $message .= "... and " . (count($threat['files']) - 5) . " more files\n";
        }
        $message .= "\n";
    }
    
    $message .= "🔧 IMMEDIATE ACTION REQUIRED\n";
    $message .= "SSH: ssh -i ~/.ssh/egao-salon_rsa -p 10022 xb592942@sv504.xbiz.ne.jp\n";
    $message .= "\n📊 Based on 2025 WordPress malware research\n";
    
    mail($alert_email, "[🚨 CRITICAL v3.0] Advanced Malware Detection - $threat_count threats", $message);
    echo "🚨 CRITICAL ALERT: $threat_count threats detected and email sent\n";
    
    // Enhanced logging
    $log_file = "/home/xb592942/security_monitor/advanced_threats.log";
    $log_entry = "[" . date('Y-m-d H:i:s') . "] v3.0 - $threat_count threats detected in {$scan_duration}s\n";
    file_put_contents($log_file, $log_entry, FILE_APPEND);
    
} else {
    echo "✅ No advanced malware signatures detected - System clean ({$scan_duration}s)\n";
}

echo "[" . date('Y-m-d H:i:s') . "] Ultra-Advanced scan completed in {$scan_duration}s\n";
?>
