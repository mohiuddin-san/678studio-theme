// ================================
// Auto-Scale Test Page Styles
// ================================
// 統合vw()関数 + g()関数組み合わせテスト

@use '../base/mixins' as *;
@use '../base/variables' as *;

// =============================================================================
// vw() + g() 統合テストページ
// =============================================================================
.auto-scale-test-page {
	@include auto-scale;
	background: linear-gradient(135deg, #667eea, #764ba2);
	min-height: 100vh;

	.main-container {
		padding: vw(24);
		max-width: vw(1200);
		margin: 0 auto;

		@include mq(md) {
			padding: vw(16);
			max-width: vw(360);
		}

		h1 {
			font-size: vw(48);
			color: white;
			text-align: center;
			margin-bottom: vw(16);

			@include mq(md) {
				font-size: vw(32);
				margin-bottom: vw(12);
			}
		}

		> p {
			font-size: vw(18);
			color: white;
			text-align: center;
			margin-bottom: vw(40);

			@include mq(md) {
				font-size: vw(16);
				margin-bottom: vw(24);
			}
		}

		.info-panel {
			background: rgba(0, 0, 0, 0.8);
			color: white;
			padding: vw(16);
			border-radius: vw(8);
			font-family: monospace;
			font-size: vw(14);
			margin-bottom: vw(40);
			text-align: center;

			@include mq(md) {
				padding: vw(12);
				border-radius: vw(6);
				font-size: vw(12);
				margin-bottom: vw(24);
			}
		}

		// =============================================================================
		// vw() + g() 組み合わせサンプル
		// =============================================================================
		.vw-grid-sample {
			h2 {
				font-size: vw(36);
				color: white;
				text-align: center;
				margin-bottom: vw(32);

				@include mq(md) {
					font-size: vw(24);
					margin-bottom: vw(20);
				}
			}

			// グリッドカードレイアウト - g()関数使用
			.grid-cards {
				@include g(
					$cols: (repeat(3, vw(320))),  // vw()でカラム幅指定
					$gap: vw(24)                  // vw()でギャップ指定
				);
				margin-bottom: vw(48);

				@include mq(md) {
					@include g(
						$cols: 1fr,               // SPは1カラム
						$gap: vw(16)             // vw()でギャップ
					);
					margin-bottom: vw(32);
				}

				.card {
					background: white;
					padding: vw(24);             // vw()でpadding
					border-radius: vw(12);       // vw()でborder-radius
					text-align: center;
					box-shadow: 0 vw(4) vw(12) rgba(0, 0, 0, 0.1);

					@include mq(md) {
						padding: vw(20);
						border-radius: vw(8);
					}

					h3 {
						font-size: vw(20);
						color: #333;
						margin-bottom: vw(12);

						@include mq(md) {
							font-size: vw(18);
							margin-bottom: vw(8);
						}
					}

					p {
						font-size: vw(14);
						color: #666;
						line-height: 1.6;
						margin: 0;

						@include mq(md) {
							font-size: vw(13);
						}
					}
				}
			}

			// フレックスグリッド - g()関数使用
			.flex-grid {
				@include g(
					$cols: (vw(480) vw(360)),    // vw()で異なる幅指定
					$gap: vw(32)                 // vw()でギャップ
				);

				@include mq(md) {
					@include g(
						$cols: 1fr,              // SPは1カラム
						$gap: vw(20)
					);
				}

				.flex-item {
					background: rgba(255, 255, 255, 0.9);
					padding: vw(20);
					border-radius: vw(8);
					text-align: center;

					@include mq(md) {
						padding: vw(16);
						border-radius: vw(6);
					}

					h4 {
						font-size: vw(18);
						color: #333;
						margin-bottom: vw(8);

						@include mq(md) {
							font-size: vw(16);
							margin-bottom: vw(6);
						}
					}

					p {
						font-size: vw(14);
						color: #666;
						margin: 0;

						@include mq(md) {
							font-size: vw(12);
						}
					}
				}
			}
		}
	}
}
