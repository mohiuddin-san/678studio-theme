@use 'sass:map';
@use 'sass:math';
@use 'sass:string';

@use 'variables' as v;

/*
 * Mixins
 * 再利用可能なスタイルパターンを定義
 */

// =============================================================================
//  主な使用はf()関数,g()関数,gitem()関数,mq()関数
// =============================================================================

/**
 * プロジェクトのFigmaデザインサイズ
 * プロジェクト開始時に一度だけ設定してください
 */
$figma-desktop: 1440 !default; // デスクトップ基準サイズ
$figma-mobile: 480 !default; // モバイル基準サイズ

/**
 * f() - シンプル＆パワフルなレスポンシブ関数
 *
 * 使用例:
 * width: f(800, 400);          // PC:800px, SP:400px（明示指定）
 * padding: f(40);              // 自動計算：PC:40px, SP:30px (デフォルト0.75倍)
 * margin: f(-20, -15);         // マイナス値対応
 * padding: f(160, $ratio: 0.2);  // カスタム縮小率：PC:160px, SP:32px (0.2倍)
 *
 * プロジェクト設定変更例:
 * $figma-desktop: 1920;        // 4Kディスプレイ用
 * $figma-mobile: 375;          // iPhone X基準
 *
 * 動作：
 * - 設定したFigmaサイズで完全一致
 * - 小さい画面〜大きい画面まで滑らかにスケーリング
 * - Figmaサイズ超: vwで比例拡大（デザイン破綻なし）
 * - マイナス値完全対応
 */
@function f($desktop-value, $mobile-value: null, $ratio: null, $max-scale: 2) {
	// %が含まれているかチェック（文字列の場合）
	$desktop-is-percent: type-of($desktop-value) == string and
		string.index($desktop-value, '%') != null;

	// %の場合はそのまま返す（レスポンシブ計算不要）
	@if $desktop-is-percent {
		@return $desktop-value;
	}

	// 数値の場合のみ計算
	@if $mobile-value == null {
		@if $ratio != null {
			$mobile-value: $desktop-value * $ratio;
		} @else {
			$mobile-value: $desktop-value * 0.75;
		}
	}

	// マイナス値かどうかを判定
	$is-negative: $desktop-value < 0;

	@if $is-negative {
		// マイナス値の場合：絶対値で計算してから最後にマイナス化
		$abs-desktop: math.abs($desktop-value);
		$abs-mobile: math.abs($mobile-value);

		// 絶対値で通常のf()計算を実行
		$abs-desktop-vw: math.div($abs-desktop, $figma-desktop) * 100;

		$result: clamp(
			#{$abs-mobile * 0.6}px,
			max(
				calc(
					#{$abs-mobile}px +
						#{($abs-desktop - $abs-mobile)} *
						((100vw - #{$figma-mobile}px) / #{($figma-desktop - $figma-mobile)})
				),
				#{$abs-desktop-vw}vw
			),
			#{$abs-desktop * $max-scale}px
		);
		// 結果をマイナス化
		@return calc(-1 * #{$result});
	} @else {
		// プラス値の処理
		@if $ratio != null {
			// $ratioが指定された場合はfs関数と同じシンプルなcalc()を使用
			@return calc(
				#{$mobile-value}px + (#{$desktop-value - $mobile-value}) *
					((100vw - #{$figma-mobile}px) / (#{$figma-desktop - $figma-mobile}))
			);
		} @else {
			// 従来通りの処理（vw上限を適切な値に調整）
			$desktop-vw: math.div($desktop-value, $figma-desktop) * 100;
			// vw上限を計算値の1.2倍程度に制限
			$reasonable-vw: math.min($desktop-vw, ($mobile-value * 2) / 1440 * 100);

			@return clamp(
				#{$mobile-value * 0.6}px,
				max(
					calc(
						#{$mobile-value}px + #{($desktop-value - $mobile-value)} *
							(
								(100vw - #{$figma-mobile}px) /
									(#{$figma-desktop - $figma-mobile})
							)
					),
					#{$reasonable-vw}vw
				),
				#{$desktop-value * $max-scale}px
			);
		}
	}
}

// =============================================================================
// 🎯 Grid関連のミクシン
// =============================================================================

/**
 * 🎯 g() - グリッド一括設定ミクシン
 * 
 * 使用例:
 * @include g(
 *   $cols: (f(300), 1fr, f(200)),    // カラム
 *   $rows: (f(80), 1fr),             // 行  
 *   $gap: f(20)                      // ギャップ
 * );
 * 
 * @include g($cols: (1fr, 2fr), $gap: f(20));          // シンプル
 * @include g($cols: (repeat(3, 1fr)), $gap: f(15));    // リピート
 * @include g($areas: 'header header' 'nav main');       // エリア指定
 */
@mixin g(
	$cols: null,
	$rows: null,
	$gap: null,
	$areas: null,
	$align: null,
	$justify: null
) {
	display: grid;

	@if $cols {
		grid-template-columns: $cols;
	}

	@if $rows {
		grid-template-rows: $rows;
	}

	@if $gap {
		gap: $gap;
	}

	@if $areas {
		grid-template-areas: $areas;
	}

	@if $align {
		align-items: $align;
	}

	@if $justify {
		justify-items: $justify;
	}
}

/**
 * 🎯 gitem() - グリッドアイテム配置ミクシン
 * 
 * 使用例:
 * @include gitem(1, 3, 1, 2);      // col: 1/3, row: 1/2
 * @include gitem(1, span 2);       // col: 1/span 2, row: auto
 * @include gitem(1, 3);            // col: 1/3, row: auto
 * @include gitem($area: 'header'); // grid-area: header
 * 
 * パラメータ:
 * - $col-start: カラム開始位置
 * - $col-end: カラム終了位置 (span X も可)
 * - $row-start: 行開始位置
 * - $row-end: 行終了位置 (span X も可)
 * - $area: グリッドエリア名
 */
@mixin gitem(
	$col-start: null,
	$col-end: null,
	$row-start: null,
	$row-end: null,
	$area: null
) {
	@if $area {
		grid-area: $area;
	} @else {
		@if $col-start and $col-end {
			grid-column: #{$col-start} / #{$col-end};
		} @else if $col-start {
			grid-column: $col-start;
		}

		@if $row-start and $row-end {
			grid-row: #{$row-start} / #{$row-end};
		} @else if $row-start {
			grid-row: $row-start;
		}
	}
}

// Breakpoints
$breakpoints: (
	'xsm': 320px,
	'sm': 480px,
	'md': 768px,
	'lg': 1024px,
	'xl': 1280px,
	'xxl': 1440px,
);

// グローバル変数でメディアクエリコンテキストを追跡
$current-mq-context: 'pc' !global;

// メディアクエリ（デフォルトをmax-widthに変更）
@mixin mq($breakpoint, $type: max) {
	@if map.has-key($breakpoints, $breakpoint) {
		$value: map.get($breakpoints, $breakpoint);

		@if $type == max {
			// 指定値より小さい（未満）= SP
			$value: $value - 1;
			@media (max-width: #{$value}) {
				$current-mq-context: 'sp' !global;
				@content;
				$current-mq-context: 'pc' !global;
			}
		} @else {
			// 指定値以上 = PC
			@media (min-width: #{$value}) {
				$current-mq-context: 'pc' !global;
				@content;
				$current-mq-context: 'pc' !global;
			}
		}
	} @else {
		@error 'Invalid breakpoint: #{$breakpoint}';
	}
}

// =============================================================================
// Design Grid Layout Mixins
// =============================================================================

/**
 * デザインから簡単にGridレイアウトを作成するmixin
 * 使用例:
 * @include design-grid(
 *   $cols: (500, 80, 1fr),      // カラム幅 (px値または1fr)
 *   $rows: (100, 200, auto),    // 行高さ (px値またはauto)
 *   $gap: 20                    // グリッドギャップ
 * );
 */
@mixin design-grid($cols: (), $rows: (), $gap: 0, $responsive: true) {
	display: grid;

	// カラムの設定
	@if length($cols) > 0 {
		$column-values: ();
		@each $col in $cols {
			@if type-of($col) == number and unit($col) == 'px' and $responsive {
				// px値のみレスポンシブ関数を使用
				$column-values: append($column-values, fs(strip-unit($col), 0.74));
			} @else {
				// px以外（%、fr、auto）やresponsive:falseの場合はそのまま
				$column-values: append($column-values, $col);
			}
		}
		grid-template-columns: $column-values;
	}

	// 行の設定
	@if length($rows) > 0 {
		$row-values: ();
		@each $row in $rows {
			@if type-of($row) == number and unit($row) == 'px' and $responsive {
				// px値のみレスポンシブ関数を使用
				$row-values: append($row-values, fs(strip-unit($row), 0.74));
			} @else {
				// px以外（%、auto）やresponsive:falseの場合はそのまま
				$row-values: append($row-values, $row);
			}
		}
		grid-template-rows: $row-values;
	}

	// ギャップの設定
	@if $gap > 0 {
		@if $responsive {
			gap: fs($gap);
		} @else {
			gap: #{$gap}px;
		}
	}
}

/**
 * Figmaデザインの値をそのまま使えるグリッドmixin
 * 
 * 特徴:
 * - Figmaの数値をそのまま入力可能 (672 → fs(672)でレスポンシブ化)
 * - fs/fsm関数を自動適用してレスポンシブ対応
 * - fr、auto、%などの単位はそのまま使用
 * 
 * 基本的な使用例:
 * @include grid(
 *   $cols: (1fr, 672, 1fr),     // 左右1fr、中央672px(レスポンシブ)
 *   $rows: (auto),               // 行高さ自動
 *   $gap: 20                     // 20px gap(レスポンシブ)
 * );
 * 
 * モバイル版の使用例:
 * @include grid(
 *   $cols: (1fr),                // 1カラム
 *   $rows: (auto, 200, auto),    // 中央200px固定(fsm関数)
 *   $gap: 16,                    // 16px gap(fsm関数)
 *   $mobile: true                // fsm関数を使用
 * );
 * 
 * 複雑なレイアウト例:
 * @include grid(
 *   $cols: (240, 1fr, 200),      // 240px, 可変, 200px
 *   $rows: (80, 1fr, 60),        // ヘッダー80px, 可変, フッター60px
 *   $gap: 24
 * );
 * 
 * 値の種類:
 * - 数値のみ(672): fs()またはfsm()でレスポンシブpx値に変換
 * - px付き(672px): fs()またはfsm()でレスポンシブpx値に変換
 * - fr系(1fr, 2fr): そのまま使用
 * - その他(auto, %, min-content等): そのまま使用
 * 
 * 🆕 新しい使い方（推奨）:
 * @include grid((f(300), 1fr, f(200)), $gap: f(20));
 * - f()関数でレスポンシブ値を簡単指定
 * - 既存のfs/fsm形式も引き続き対応
 */
@mixin grid(
	$cols: (),
	$rows: (),
	$gap: 0,
	$areas: null,
	$auto-flow: null,
	$align: null,
	$justify: null,
	$mobile: false
) {
	display: grid;

	// カラムの設定
	@if length($cols) > 0 {
		$column-values: ();
		@each $col in $cols {
			@if type-of($col) == number and unitless($col) {
				// 単位なしの数値はfs/fsm関数でレスポンシブpx値に変換
				@if $mobile {
					$column-values: append($column-values, fsm($col));
				} @else {
					$column-values: append($column-values, fs($col));
				}
			} @else if type-of($col) == number and unit($col) == 'px' {
				// px単位付きの値はfs/fsm関数でレスポンシブに変換
				$col-value: strip-unit($col);
				@if $mobile {
					$column-values: append($column-values, fsm($col-value));
				} @else {
					$column-values: append($column-values, fs($col-value));
				}
			} @else {
				// fr、auto、%などはそのまま使用
				$column-values: append($column-values, $col);
			}
		}
		grid-template-columns: $column-values;
	}

	// 行の設定
	@if length($rows) > 0 {
		$row-values: ();
		@each $row in $rows {
			@if type-of($row) == number and unitless($row) {
				// 単位なしの数値はfs/fsm関数でレスポンシブpx値に変換
				@if $mobile {
					$row-values: append($row-values, fsm($row));
				} @else {
					$row-values: append($row-values, fs($row));
				}
			} @else if type-of($row) == number and unit($row) == 'px' {
				// px単位付きの値はfs/fsm関数でレスポンシブに変換
				$row-value: strip-unit($row);
				@if $mobile {
					$row-values: append($row-values, fsm($row-value));
				} @else {
					$row-values: append($row-values, fs($row-value));
				}
			} @else {
				// fr、auto、%などはそのまま使用
				$row-values: append($row-values, $row);
			}
		}
		grid-template-rows: $row-values;
	}

	// ギャップの設定
	@if $gap > 0 {
		@if type-of($gap) == number and unitless($gap) {
			@if $mobile {
				gap: fsm($gap);
			} @else {
				gap: fs($gap);
			}
		} @else if type-of($gap) == number and unit($gap) == 'px' {
			$gap-value: strip-unit($gap);
			@if $mobile {
				gap: fsm($gap-value);
			} @else {
				gap: fs($gap-value);
			}
		} @else {
			gap: $gap;
		}
	}

	// 🆕 グリッドエリアの設定
	@if $areas {
		grid-template-areas: $areas;
	}

	// 🆕 自動フローの設定
	@if $auto-flow {
		grid-auto-flow: $auto-flow;
	}

	// 🆕 アイテムの配置
	@if $align {
		align-items: $align;
	}

	@if $justify {
		justify-items: $justify;
	}
}

/**
 * グリッドアイテムの配置を簡単に設定するmixin
 * 使用例:
 * @include grid-item(
 *   $col-start: 1,
 *   $col-end: 3,
 *   $row-start: 1,
 *   $row-end: 4
 * );
 */
@mixin grid-item(
	$col-start: auto,
	$col-end: auto,
	$row-start: auto,
	$row-end: auto
) {
	@if $col-start != auto {
		grid-column-start: $col-start;
	}
	@if $col-end != auto {
		grid-column-end: $col-end;
	}
	@if $row-start != auto {
		grid-row-start: $row-start;
	}
	@if $row-end != auto {
		grid-row-end: $row-end;
	}
}

/**
 * グリッドアイテムの配置を短縮形で設定（0ベースのインデックス）
 * 使用例:
 * @include grid-area(0, 2, 0, 3);  // col-start, col-end, row-start, row-end
 */
@mixin grid-area($col-start, $col-end, $row-start, $row-end) {
	grid-column: #{$col-start + 1} / #{$col-end + 1};
	grid-row: #{$row-start + 1} / #{$row-end + 1};
}

/**
 * デザインのオートレイアウトを再現するmixin
 * 使用例:
 * @include auto-layout(
 *   $direction: 'horizontal',  // または 'vertical'
 *   $gap: 20,
 *   $padding: 40
 * );
 */
@mixin auto-layout(
	$direction: 'horizontal',
	$gap: 0,
	$padding: null,
	$align: center,
	$justify: flex-start
) {
	display: flex;

	@if $direction == 'horizontal' {
		flex-direction: row;
	} @else if $direction == 'vertical' {
		flex-direction: column;
	}

	@if $gap > 0 {
		gap: fs($gap);
	}

	@if $padding {
		@if type-of($padding) == list {
			padding: fs(nth($padding, 1))
				fs(nth($padding, 2))
				fs(nth($padding, 3))
				fs(nth($padding, 4));
		} @else {
			padding: fs($padding);
		}
	}

	align-items: $align;
	justify-content: $justify;
}

/**
 * コンテナ突き抜け背景mixin
 * 
 * 仕組み：
 * 画面全体                    コンテナ
 * |--------------------------|
 * |        |  Container  |   |
 * |        |     50%     |   |  ← コンテナは画面の中央にある
 * |        |             |   |
 * |--------------------------|
 *          ↑             ↑
 *       25%            75%
 * 
 * calc(-50vw + 50%)の計算：
 * - 50vw = 画面幅の50%（画面中央まで）
 * - 50% = コンテナ中央からの位置
 * - -50vw + 50% = コンテナ左端から画面左端までの距離
 * 
 * 使用例:
 * @include breakout-bg('left', 50vw, 84%, #57aace);  // 左に50vw幅、84%からオフセット
 * @include breakout-bg('right', 30vw, 20%, red);     // 右に30vw幅、20%からオフセット
 * @include breakout-bg('both', 100vw, 50%, blue);    // 両端まで全幅
 * 
 * パラメータ説明:
 * @param {String} $direction - 'left', 'right', または 'both' - 突き抜ける方向
 * @param {String} $width - 幅（vw単位） - 画面幅に対する絶対的なサイズ
 * @param {String} $offset - オフセット（%単位） - コンテナ内での開始位置（0%=左端, 50%=中央, 100%=右端）
 * @param {Color} $bg-color - 背景色
 * 
 * 例: @include breakout-bg('left', 100vw, 40%, #57aace);
 * → コンテナの40%の位置から左に画面全幅まで青色で突き抜け
 */
@mixin breakout-bg(
	$direction: 'left',
	$width: 50vw,
	$offset: 50%,
	$bg-color: #57aace
) {
	position: relative;

	&::before {
		content: '';
		position: absolute;
		top: 0;
		height: 100%;
		background-color: $bg-color;
		z-index: -1;

		@if $direction == 'left' {
			left: calc(-50vw + #{$offset});
			width: $width;
		} @else if $direction == 'right' {
			right: calc(-50vw + #{$offset});
			width: $width;
		} @else if $direction == 'both' {
			left: calc(-50vw + 50%);
			right: calc(-50vw + 50%);
		}
	}
}

// ユニット削除関数
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return math.div($number, $number * 0 + 1);
	}
	@return $number;
}

/**
 * シンプル化したレスポンシブサイズ関数 - 縮小率を直接指定可能
 * 
 * @param {Number} $max-size - 最大サイズ（PC向け1440pxでの値）
 * @param {Number} $ratio - 縮小率（デフォルト0.74）
 * @return {String} - 計算されたcalc()式
 * 
 * 使用例:
 * font-size: fs(20);           // 基本使用法（デフォルト縮小率0.74）
 * font-size: fs(20, 0.5);      // 縮小率0.5で計算
 * font-size: fs(20, 1.2);      // 拡大率1.2で計算
 */
@function fs($max-size, $ratio: 0.74) {
	// 固定のビューポート範囲
	$min-vw: 768;
	$max-vw: 1440;

	// 最小サイズを計算
	$min-size: $max-size * $ratio;

	// calc式を返す
	@return calc(
		#{$min-size}px + (#{$max-size - $min-size}) *
			((100vw - #{$min-vw}px) / (#{$max-vw - $min-vw}))
	);
}

/**
 * 統一レスポンシブ関数 - PC/SPを自動判定
 * 
 * @param {Number} $value - デザインカンプの値
 * @param {Number} $sp-value - モバイル用の値（省略可）
 * @return {String} - レスポンシブな値
 * 
 * 使用例:
 * padding: r(40);          // PC/SP自動切り替え
 * padding: r(40, 20);      // PC:40px, SP:20px
 */
@function r($value, $sp-value: null) {
	@if $sp-value == null {
		$sp-value: $value;
	}
	// PC/SPで異なる値を返すためにCSS変数を使用
	@return var(--r-#{$value}-#{$sp-value}, #{fs($value)});
}

/**
 * レスポンシブ値用のCSS変数生成mixin
 * bodyまたはルート要素で使用
 */
@mixin r-vars() {
	// デスクトップ用
	@include mq(md, min) {
		--r-mode: desktop;
	}
	// モバイル用
	@include mq(md) {
		--r-mode: mobile;
	}
}

/**
 * 768px以下（モバイル）専用のレスポンシブサイズ関数
 * 比率を維持して画面幅に比例してスケール
 * 
 * @param {Number} $size-480 - 480pxでの基準サイズ
 * @return {String} - 計算されたvw値
 */
@function fsm($size-480) {
	// 480pxを基準として画面幅の割合を計算
	$vw-ratio: math.div($size-480, 480) * 100;
	// 360px以下では段階的に縮小、それ以上では比率維持
	@return clamp(#{$size-480 * 0.6}px, #{$vw-ratio}vw, #{$size-480 * 1.8}px);
}

/**
 * スペーシング専用mixin - padding/marginを簡単に設定
 * 
 * @param {String} $prop - 'padding' or 'margin'
 * @param {List} $values - 1〜4個の値
 * 
 * 使用例:
 * @include spacing(padding, 40);          // 全方向40px
 * @include spacing(padding, 40 20);       // 上下40px, 左右20px
 * @include spacing(margin, 40 20 30 10);  // 上40px, 右20px, 下30px, 左10px
 */
@mixin spacing($prop, $values...) {
	$length: length($values);

	@if $length == 1 {
		#{$prop}: fs(nth($values, 1));
		@include mq(md) {
			#{$prop}: fsm(nth($values, 1));
		}
	} @else if $length == 2 {
		#{$prop}: fs(nth($values, 1)) fs(nth($values, 2));
		@include mq(md) {
			#{$prop}: fsm(nth($values, 1)) fsm(nth($values, 2));
		}
	} @else if $length == 3 {
		#{$prop}: fs(nth($values, 1)) fs(nth($values, 2)) fs(nth($values, 3));
		@include mq(md) {
			#{$prop}: fsm(nth($values, 1)) fsm(nth($values, 2)) fsm(nth($values, 3));
		}
	} @else if $length == 4 {
		#{$prop}: fs(nth($values, 1))
			fs(nth($values, 2))
			fs(nth($values, 3))
			fs(nth($values, 4));
		@include mq(md) {
			#{$prop}: fsm(nth($values, 1)) fsm(nth($values, 2)) fsm(nth($values, 3))
				fsm(nth($values, 4));
		}
	}
}

/**
 * タイポグラフィ専用mixin
 * 
 * 使用例:
 * @include typo(24);              // font-size: fs(24)
 * @include typo(24, 18);           // PC:24px, SP:18px
 * @include typo(24, 18, 1.6, 700); // サイズ、行高、太さ指定
 */
@mixin typo($pc-size, $sp-size: null, $line-height: 1.6, $weight: null) {
	font-size: fs($pc-size);
	line-height: $line-height;

	@if $weight {
		font-weight: $weight;
	}

	@if $sp-size {
		@include mq(md) {
			font-size: fsm($sp-size);
		}
	} @else {
		@include mq(md) {
			font-size: fsm($pc-size);
		}
	}
}

// Flexbox center mixin
@mixin flex-center {
	display: flex;
	align-items: center;
	justify-content: center;
}

// Button reset mixin
@mixin button-reset {
	background: none;
	border: none;
	padding: 0;
	margin: 0;
	cursor: pointer;
	outline: none;
}

// Clearfix mixin
@mixin clearfix {
	&::after {
		content: '';
		display: table;
		clear: both;
	}
}

// PCでのみ表示するミックスイン
@mixin pc-only {
	display: none;

	@include mq(md, min) {
		display: block;
	}
}

// スマホでのみ表示するミックスイン
@mixin sp-only {
	display: block;

	@include mq(md, min) {
		display: none;
	}
}

/**
 * 🎯 真の自動スケールシステム
 * Figmaの値をそのまま使用して、画面幅に応じて流動的にスケール
 *
 * プロジェクト設定（デフォルト値）:
 * $figma-sp-base: 380px !default;   // SP基準サイズ
 * $figma-pc-base: 1440px !default;  // PC基準サイズ
 *
 * 基本的な使用例:
 * .sp-container {
 *   @include sp;      // デフォルト380px基準
 * }
 *
 * .pc-container {
 *   @include pc;      // デフォルト1440px基準
 * }
 *
 * プロジェクト固有の基準サイズ設定:
 * $figma-sp-base: 320px;
 * $figma-pc-base: 1200px;
 * @use 'base/mixins' as m;
 *
 * カスタム基準での使用:
 * .sp-container {
 *   @include sp(375);   // 375px基準
 * }
 */

// プロジェクト設定：Figma基準サイズ
$figma-sp-base: 380px !default; // SP基準サイズ
$figma-pc-base: 1440px !default; // PC基準サイズ

// =============================================================================
// 🎯 自動vw変換システム - CSS変数を使った自動判定版
// =============================================================================

// メディアクエリコンテキスト自動判定vw関数
@function vw($size, $min: null) {
	// メディアクエリコンテキストに応じて基準を自動切り替え
	$base: if($current-mq-context == 'sp', 380, 1440);
	$calculated-value: #{$size / $base * 100}vw;

	@if $min {
		@return min(#{$min}, $calculated-value);
	} @else {
		@return $calculated-value;
	}
}

// プログレッシブエンハンスメント版（メディアクエリコンテキスト自動判定）
@mixin vw-progressive($property, $size, $min: null) {
	// メディアクエリコンテキストに応じて基準を自動切り替え
	$base: if($current-mq-context == 'sp', 380, 1440);
	$css-var: if($current-mq-context == 'sp', '--figma-base-sp', '--figma-base');

	// 1. 古いブラウザ用: 静的vw値（Safari 16.4対応）
	@if $min {
		#{$property}: min(#{$min}, #{$size / $base * 100}vw);
	} @else {
		#{$property}: #{$size / $base * 100}vw;
	}

	// 2. モダンブラウザ用: CSS変数で動的計算
	@supports (--css: variables) {
		@if $min {
			#{$property}: min(#{$min}, calc(#{$size}px * (100vw / var(#{$css-var}, #{$base}px))));
		} @else {
			#{$property}: calc(#{$size}px * (100vw / var(#{$css-var}, #{$base}px)));
		}
	}
}

// ショートハンド版（複数値対応・自動判定）
@mixin vw-progressive-shorthand($property, $values...) {
	// 例: @include vw-progressive-shorthand(padding, 30, 40, 10);
	$base: if($current-mq-context == 'sp', 380, 1440);
	$css-var: if($current-mq-context == 'sp', '--figma-base-sp', '--figma-base');

	$static-values: ();
	$css-var-values: ();

	@each $value in $values {
		$static-values: append($static-values, #{$value / $base * 100}vw);
		$css-var-values: append($css-var-values, calc(#{$value}px * (100vw / var(#{$css-var}, #{$base}px))));
	}

	// 1. 古いブラウザ用（Safari 16.4対応）
	#{$property}: $static-values;

	// 2. モダンブラウザ用（CSS変数の良さを活用）
	@supports (--css: variables) {
		#{$property}: $css-var-values;
	}
}

// SP用のvw関数（メディアクエリ内で使用）
@function vw-sp($size, $min: null) {
	// SP基準（380px）での計算
	$sp-value: #{$size / 380 * 100}vw;

	@if $min {
		@return min(#{$min}, $sp-value);
	} @else {
		@return $sp-value;
	}
}

// 自動切り替えミクシン（プログレッシブエンハンスメント）
@mixin vw-auto($property, $size, $sp-size: null) {
	// 1. 古いブラウザ用フォールバック（静的値）
	#{$property}: #{$size / 1440 * 100}vw;

	// 2. CSS変数対応ブラウザ用（動的値）
	@supports (--css: variables) {
		#{$property}: calc(#{$size}px * (100vw / var(--figma-base, 1440px)));
	}

	// 3. SP用の値（指定があれば）
	@if $sp-size {
		@include mq(md) {
			#{$property}: #{$sp-size / 380 * 100}vw;

			@supports (--css: variables) {
				#{$property}: calc(#{$sp-size}px * (100vw / var(--figma-base, 380px)));
			}
		}
	}
}

// フォント専用（最小値付き）
@function vw-font($size, $min: 12px) {
	@return min(#{$min}, calc(#{$size}px * (100vw / var(--figma-base))));
}

// 従来版も維持（明示的に使いたい場合）
@function vw-pc($size, $min: null) {
	@if $min {
		@return min(#{$min}, calc(#{$size}px * (100vw / #{$figma-pc-base})));
	} @else {
		@return calc(#{$size}px * (100vw / #{$figma-pc-base}));
	}
}

@function vw-sp($size, $min: null) {
	@if $min {
		@return min(#{$min}, calc(#{$size}px * (100vw / #{$figma-sp-base})));
	} @else {
		@return calc(#{$size}px * (100vw / #{$figma-sp-base}));
	}
}

// SP用自動スケールコンテナ
@mixin sp($base-width: $figma-sp-base) {
	width: 100%;
	max-width: 100vw;
	overflow-x: hidden;

	@media (max-width: 767px) {
		// SP範囲でのみ表示
	}

	@media (min-width: 768px) {
		display: none;
	}
}

// PC用自動スケールコンテナ
@mixin pc($base-width: $figma-pc-base) {
	width: 100%;
	max-width: 100vw;
	overflow-x: hidden;

	@media (max-width: 767px) {
		display: none;
	}

	@media (min-width: 768px) {
		// PC範囲でのみ表示
	}
}

// 個別要素スケール用mixin
@mixin avw-size($size, $base: $figma-sp-base) {
	@media (max-width: 767px) {
		font-size: avw($size, $base) !important;
	}
}

@mixin avw-pc-size($size, $base: $figma-pc-base) {
	@media (min-width: 768px) {
		font-size: avw-pc($size, $base) !important;
	}
}

// 横スクロール防止
// 🎯 自動スケールミクシン - CSS変数自動切り替え対応（Safari 16.4+ 互換）
@mixin auto-scale {
	// PC用（デフォルト）- Safari 16.4 互換性確保
	--figma-base: #{$figma-pc-base};

	// SP用（767px以下）
	@include mq(md) {
		--figma-base: #{$figma-sp-base};
	}

	// 横スクロール防止 - Safari 16.4対応強化
	overflow-x: hidden;
	width: 100%;
	max-width: 100vw;

	// Safari 16.4でbody操作が不安定な場合があるため、より安全なアプローチ
	// 代わりにcontainer要素に適用
	@supports not (container-type: inline-size) {
		// Safari 16.4 fallback
		* {
			box-sizing: border-box;
		}
	}
}
